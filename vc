#!/usr/bin/ruby

require 'socket'

# ---------------------------------------------------------------
# VCS global setting
# ---------------------------------------------------------------

$debug = false
$vcs_tool = "git"
$git_remote_branch = "origin/master"
$git_local_branch = nil
$git_remote_machine_host = nil
$show_detail= false

# ---------------------------------------------------------------
# Frontend parsing
# ---------------------------------------------------------------

class OptionArgumentPair
	@option
	@argument 
	@no_argument
	def initialize( option, argument )
		@option = option
		@argument = argument
		@no_argument = ((0 == argument.size) ? true : false)
	end

	def show()
		puts "-------------------------"
		if @no_argument
			puts "option = #{@option}"
			puts "require argument = no"
		else
			puts "option = #{@option}"
			puts "require argument = yes"
			puts "argc = #{@argument.size}"
			for i in 0...@argument.size
				puts "argv#{i + 1} = #{argument[i]}"
			end
		end
		puts "-------------------------"
	end

	attr_reader :option, :argument, :no_argument
end

def show_help ()
	puts <<EOF
[Usage]] vc_git

-h, -help
	show help

-log <file1> <file2> ...
	show file check-in history

-status
-status <file1> <file2> ...
	show specified file status or all file under current working directory

-list_diff
	show all diff files under current working directory

-list_missing
	show all missing files

-list_add
	show all add files
	
-diff <file>
-diff <file> <commit_id1> <commit_id2>
	use vimdiff to diff files with remote or specified version

-add <file1> <file2> ...
	add new or modified file to commit

-cancel <file1> <file2> ...
	cancel added file

-delete <file1> <file2> ...
	delete file 

-get <file> <commit_id1> <commit_id2> ...
	download multiple file from remote with specified commit id 

-get_missing
	download all missing file from remote

-sync
-sync <file1> <file2> ...
	sync specified file or all file

-fetch
	fetch remote data to local (cache)
	
-commit
	commit with change log

-debug
EOF
end

if 0 == ARGV.length
	show_help()
	exit(0)
end

debug_cmd_parse = ENV["VC_DEBUG_CMD_PARSE"]
if debug_cmd_parse
	for i in 0...ARGV.length
		puts "argv#{i + 1} = #{ARGV[i]}"
	end
end

option_paris = []
i = 0
while true
	if i == ARGV.length	
		break
	end

	option = ARGV[i]
	argument = []
	if nil == (option =~ /^\s*-\S+/)
		puts "[Error] command line syntax error --> option syntax error (parse=#{option})"
		exit(1)
	end

	if debug_cmd_parse
		puts "[DEBUG] parsing option=#{option} args ..."
	end
	while i + 1 < ARGV.length
		arg = ARGV[i + 1]
		if arg =~ /^\s*-\S+/
			# this toke is not arg, it's a option
			break
		else
			if debug_cmd_parse
				puts "[DEBUG] arg#{argument.size + 1} = #{arg}"
			end

			argument.push( arg )
			i += 1
		end
	end

	if debug_cmd_parse and 0 == argument.size
		puts "[DEBUG] there is no argument"
	end

	option_paris.push( OptionArgumentPair.new(option, argument) )

	i += 1
end

# pre-process global setting
for opt in option_paris
	case opt.option
		when '-h', '-help'
			show_help()
			exit(0)
		when '-debug'
			$debug = true
		when '-detail'
			$show_detail = true
		when '-vcs_tool'
			if 0 == opt.argument.size
				puts "[Error] there is no VCS tool specify in -vcs_tool"
				exit(1)
			end
			$vcs_tool = opt.argument[0]
			puts "use VCS tool = #{$vcs_tool}"
	end
end

if $debug
	puts "[DEBUG] Following show all cmd option :"
	for opt in option_paris
		opt.show
	end
end

# ---------------------------------------------------------------
# VCS main
# ---------------------------------------------------------------

def call_system ( cmd )
	success = system( cmd )
	if nil == success
		puts "[Error] system fail to execute command #{cmd}"
		exit(1)
	elsif false == success
		puts "[Error] get error code #{$?.exitstatus} when child (PID=#{$?.pid}) execute system command #{cmd}"
		exit(1)
	end
end

def call_system_wo_exit_check ( cmd )
	success = system( cmd )
	if nil == success
		puts "[Error] system fail to execute command #{cmd}"
		exit(1)
	end
end

def fetch_remote_data_to_local ()
	if "git" == $vcs_tool 
		cmd = "git config --get remote.origin.url"
		puts "fetch remote branch '#{$git_remote_branch}' (host=#{$git_remote_machine_host}) data to local branch '#{$git_local_branch}' (host=#{Socket.gethostname}) ..."
		cmd = "git fetch"
		call_system( cmd )
	end
end

def check_file_history ( files )
	if "git" == $vcs_tool 
		for file in files
			if not File.exist?( file )
				puts "[Warning] file #{file} does not exist"
				next
			end
			puts "-------------------------"
			puts "query #{file} history ..."
			cmd = "git log --date=iso --abbrev-commit --pretty=format:\"%h [%an] %ad %s\" #{$remote_branch} -- #{file}"
			call_system( cmd )
			puts "-------------------------"
		end
	end
end

def check_file_status ( files )
	if "git" == $vcs_tool 
		for file in files
			if $show_detail
				puts "-------------------------"
				puts "query #{file} status ..."
				cmd = "git status #{file}"
				call_system( cmd )
				puts "-------------------------"
			else
				cmd = "git status --short #{file}"
				IO.popen( cmd ) { |io|
					line = io.gets
					if nil == line
						puts "#{file} => latest"
					elsif line =~ /^\s*M/
						puts "#{file} => modified"
					elsif line =~ /^\s*D/
						puts "#{file} => deleted"
					elsif line =~ /^\s*\?\?/
						puts "#{file} => untracked"
					else
						puts "#{file} => #{line.slice(/^\s*(\S+)/, 1)}"
					end
				}
			end
		end
	end
end

def add_files ( files )
	if "git" == $vcs_tool 
		for file in files
			if not File.exist?( file )
				puts "[Warning] file #{file} does not exist"
				next
			end
			puts "add #{file}"
			cmd = "git add #{file}"
			call_system( cmd )
		end
	end
end

def delete_files ( files )
	if "git" == $vcs_tool 
		for file in files
			if not File.exist?( file )
				puts "[Warning] file #{file} does not exist"
				next
			end
			puts "delete #{file}"
			cmd = "git rm -- #{file}"
			call_system( cmd )
		end
	end
end

def cancel_files ( files )
	if "git" == $vcs_tool 
		for file in files
			if not File.exist?( file )
				puts "[Warning] file #{file} does not exist"
				next
			end
			puts "cancel #{file}"
			cmd = "git reset -q HEAD -- #{file}"
			call_system( cmd )
		end
	end
end

def sync_all_files ()
	if "git" == $vcs_tool 
		puts "update file from remote branch '#{$git_remote_branch}' to local branch '#{$git_local_branch}' ..."

		# update (merge FETCH_HEAD)
		git merge origin/master
		cmd = "git merge #{$git_remote_branch}"
		call_system( cmd )

		# get missing file
		get_missing_files()
	end
end

def sync_file ( file )
	if "git" == $vcs_tool 
		cmd = "git status --short #{file}"
		IO.popen( cmd ) { |io|
			line = io.gets
			if nil == line
				puts "file '#{file}' is already latest version"
			elsif line =~ /^\s*M/
				puts "merge file '#{file}' from remote branch '#{$git_remote_branch}' ..."
				cmd = "git checkout #{$git_remote_branch} -- #{file}"
				call_system( cmd )
			elsif line =~ /^\s*D/
				get_missing_file( file )
			elsif line =~ /^\s*\?\?/
				puts "file '#{file}' is untracked"
			else
				puts "file '#{file}' has unknown status #{line.slice(/^\s*(\S+)/, 1)}"
			end
		}
	end
end

def sync_files ( files )
	for file in files
		sync_file( file )
	end
end

def get_missing_files_list
	missing_files = []
	if "git" == $vcs_tool 
		cmd = "git status --short"
		IO.popen( cmd ) { |io|
			while ( line = io.gets ) 
				if line =~ /^\s*D/
					missing_files.push( line.slice(/\s+(\S+)$/, 1) )
				end
			end
		}
	end
	return missing_files
end

def show_missing_files ()
	missing_files = get_missing_files_list()
	for file in missing_files
		puts file
	end
end

def get_missing_all_files ()
	missing_files = get_missing_files_list()
	if "git" == $vcs_tool 
		for file in missing_files
			get_missing_file( file )
		end
	end
end

def get_missing_file ( file )
	if "git" == $vcs_tool 
		puts "download missing file '#{file}' from branch '#{$git_remote_branch}' ..."
		cmd = "git checkout #{$git_remote_branch} -- #{file}"
		call_system( cmd )
	end
end

def diff_file ( file )
	if "git" == $vcs_tool 
		if not File.exist?( file )
			puts "[Warning] file #{file} does not exist"
			return
		end
		puts "diff #{file} ..."
		cmd = "git difftool --no-prompt --tool=vimdiff #{$git_remote_branch} -- #{file}"
		call_system_wo_exit_check( cmd )
	end
end

def diff_file_two_version ( file, commit_id1, commit_id2 )
	if "git" == $vcs_tool 
		if not File.exist?( file )
			puts "[Warning] file #{file} does not exist"
			return
		end
		puts "diff #{file} between commit id #{commit_id1} and #{commit_id2}..."
		cmd = "git difftool --no-prompt --tool=vimdiff #{commit_id1} #{commit_id2} -- #{file}"
		call_system_wo_exit_check( cmd )
	end
end

def get_diff_files_list ()
	diff_file_list = []
	if "git" == $vcs_tool 
		cmd = "git diff --name-only #{$git_remote_branch} -- #{Dir.pwd()}"
		IO.popen( cmd ) { |io|
			while ( line = io.gets ) 
				diff_file_list.push( line.chop )
			end
		}
	end
	return diff_file_list
end

def show_diff_files ()
	diff_file_list = get_diff_files_list()
	for file in diff_file_list
		puts file
	end
end

def diff_all_confict_files ()
	diff_file_list = get_diff_files_list()
	for file in diff_file_list
		diff_file( file )
	end
end

def get_all_add_files ()
	if "git" == $vcs_tool 
		add_files = []
		cmd = "git diff --name-only --staged"
		IO.popen( cmd ) { |io|
			while ( line = io.gets ) 
				add_files.push( line.chop )
			end
		}
	end
	return add_files
end

def show_all_add_files ()
	add_files = get_all_add_files()
	for file in add_files
		puts file
	end
end

def get_file ( file, commit_id )
	if "git" == $vcs_tool 
		if not File.exist?( file )
			puts "[Warning] file #{file} does not exist"
			return
		end
		dump_file_name="#{file}\##{commit_id}"
		puts "dump #{file} commit_id=#{commit_id}} to #{dump_file_name} ..."
		cmd = "git show #{commit_id}:#{file} > #{dump_file_name}"
		call_system( cmd )
	end
end

def get_all_file_under_dir ( dirname )
	find_cmd = "find #{dirname} -maxdepth 1 -type f"
	files = []
	IO.popen( find_cmd ) { |io|
		while ( line = io.gets ) 
			line.chop!
			if nil != line
				line.gsub!( /^\.\//, '' )
				files.push( line )
			end
		end 
	} 
	return files
end

def commit_with_changelog ()
	user_name = nil
	cmd = "git config --get user.name"
	IO.popen( cmd ) { |io|
		line = io.gets
		user_name = line.chop
	}
	user_email = nil
	cmd = "git config --get user.email"
	IO.popen( cmd ) { |io|
		line = io.gets
		user_name = line.chop
	}
	temp_file = nil
	cmd = "mktemp /tmp/.vc.XXXXXXXX"
	IO.popen( cmd ) { |io|
		line = io.gets
		temp_file = line.chop
	}

	add_files = get_all_add_files()

	# modify change log
	fout = File.open( temp_file, "w" )
	fout.puts "[Description]"
	fout.puts ""
	fout.puts "[Commit Files]"
	for file in add_files
		fout.puts file
	end
	fout.puts ""
	fout.puts "-------------------------------------------"
	fout.close

	call_system( "vim #{temp_file}" )

	print "[confirm] commit (Y/N) ? "
	user_input = STDIN.gets.chop
	if user_input == "y" 
		puts "\ncommit to remote_branch '#{$git_remote_branch}' (host=#{$git_remote_machine_host}) ..."
		call_system( "git commit -F #{temp_file}" )
		call_system( "git push origin master" )
	end

	File.delete( temp_file )
end

# get local branch name
if "git" == $vcs_tool 
	cmd = "git branch"
	IO.popen( cmd ) { |io|
		line = io.gets.chop
		$git_local_branch = line.slice( /(\S+)$/, 1 )
	}

	cmd = "git config --get remote.origin.url"
	IO.popen( cmd ) { |io|
		line = io.gets
		$git_remote_machine_host = line.chop
		
	}

	# check vimdiff exist
	cmd = "which vimdiff > /dev/null 2>&1"
	call_system( cmd )

	if $debug or $show_detail
		puts "[Info] git local  branch = #{$git_local_branch}"
		puts "[Info] git remote branch = #{$git_remote_branch}"
	end
end

for opt in option_paris
	case opt.option
		when '-fetch_remote'
			fetch_remote_data_to_local()

		when '-log'
			check_file_history( opt.argument )

		when '-status'
			if 0 == opt.argument.size
				check_file_status( get_all_file_under_dir(".") )
			else
				check_file_status( opt.argument )
			end

		when '-add'
			add_files( opt.argument )

		when '-delete'
			delete_files( opt.argument )

		when '-cancel'
			cancel_files( opt.argument )

		when '-sync'
			if 0 == opt.argument
				sync_all_files()
			else
				sync_files( opt.argument )
			end

		when '-list_missing'
			show_missing_files()

		when '-get_missing'
			get_missing_all_files()

		when '-diff'
			if 0 == opt.argument.size
				diff_file( opt.argument[0] )
			elsif 3 == opt.argument.size
				diff_file_two_version( opt.argument[0], opt.argument[1], opt.argument[2] )
			end

		when '-diff_all'
			diff_all_confict_files()

		when '-list_diff'
			show_diff_files()

		when '-list_add'
			show_all_add_files()

		when '-get'
			if opt.argument.size < 2
				puts "[Error] syntax error --> please use '-get <file> <commit_id1> <commit_id2> ...'"
				exit(1)
			end
			for i in 1...opt.argument.size
				get_file( opt.argument[0], opt.argument[i] )
			end

		when '-commit'
			commit_with_changelog()
	end
end
