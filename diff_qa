#!/usr/bin/ruby

require 'getoptlong'

$debug = false

# ---------------------------------------------------------------
# Frontend parsing
# ---------------------------------------------------------------

def show_help ()
	puts <<EOF
[Usage]] qa

-h, --help
	show help

-i, --input <qa_report>
	specify director name to collect all qa data

-f, --fail 
	list all fail file

-g, --golden 
	list all golden need update

-a, --update_all 
	update all fail case to golden

-x, --debug
EOF
end

if 0 == ARGV.length
	show_help()
	exit(0)
end

opts = GetoptLong.new(
	[ '--help', '-h', GetoptLong::NO_ARGUMENT ],
	[ '--input', '-i', GetoptLong::REQUIRED_ARGUMENT ],
	[ '--fail', '-f', GetoptLong::NO_ARGUMENT ],
	[ '--golden', '-g', GetoptLong::NO_ARGUMENT ],
	[ '--update_all', '-a', GetoptLong::NO_ARGUMENT ],
	[ '--debug', '-x', GetoptLong::NO_ARGUMENT ],
)

qa_report = nil
list_fail_only = false
list_golden_only = false
update_all_fail_case = false

opts.each do |opt, arg|
	case opt
		when '--help'
			show_help()
		when '--input'
			qa_report = arg
		when '--fail'
			list_fail_only = true
		when '--golden'
			list_golden_only = true
		when '--update_all'
			update_all_fail_case = true
		when '--debug'
			$debug = true
	end
end

# ---------------------------------------------------------------
# Main
# ---------------------------------------------------------------

def call_system ( cmd )
	success = system( cmd )
	if nil == success
		puts "[Error] system fail to execute command #{cmd}"
		exit(1)
	elsif false == success
		puts "[Error] get error code #{$?.exitstatus} when child (PID=#{$?.pid}) execute system command #{cmd}"
		exit(1)
	end
end

class TestCase
	@test_abs_path
	@golden_abs_path
	def initialize( test_abs_path, golden_abs_path )
		@test_abs_path = test_abs_path
		@golden_abs_path = golden_abs_path
	end

	attr_reader :test_abs_path, :golden_abs_path
end

current_cmd = nil
current_test = nil
fin = File.open( qa_report, "r" )
update_case_tuple_list = []
fail_list = []
while !fin.eof
	line = fin.readline.chop
	cmd_pattern = Regexp.new( /^\s*\*\s*cmd\s*=\s*(\S+)/ )
	if line =~ cmd_pattern
		current_cmd = line.slice( cmd_pattern, 1 )
	end
	test_pattern = Regexp.new( /^\s*->\s*qa\s*=\s*(\S+)/ )
	if line =~ test_pattern
		current_test = line.slice( test_pattern, 1 )
	end

	diff_pattern = Regexp.new( /^\s*\+\s*(\S+)\s*=\s*FAIL/ )
	if line =~ diff_pattern
		check_file = line.slice( diff_pattern, 1 )
		golden_file = File.dirname( current_cmd ) + "/golden/#{check_file}"
		qa_file = "#{current_test}/#{check_file}"
		if $debug
			puts "#{qa_file} FAIL"
		end

		fail_list.push( TestCase.new( qa_file, golden_file ) )

		if list_fail_only or list_golden_only or update_all_fail_case
			nil
		else
			already_update = false
			system( "diff -q #{golden_file} #{qa_file} > /dev/null" )
			if 0 == $?.exitstatus
				puts "--------------------------------------------------------------"
				puts golden_file
				puts qa_file
				puts "already update"
				already_update = true
				next
			end

			# query user for diff or update
			puts "--------------------------------------------------------------"
			while true
				puts golden_file
				puts qa_file
				printf( "vimdiff[y] ignore[n] copy[c]? " )
				user_input = STDIN.gets.chop
				if user_input == "y" or user_input == ""
					call_system( "vimdiff #{golden_file} #{qa_file}" )
					break
				elsif user_input == "c"
					call_system( "cp -f #{qa_file} #{golden_file}" )
					break
				elsif user_input == "n"
					break
				end
			end
		end
	end
end

if list_fail_only
	for i in 0...fail_list.size
		puts fail_list[i].test_abs_path
	end
end

if list_golden_only
	for i in 0...fail_list.size
		puts fail_list[i].golden_abs_path
	end
end

if update_all_fail_case
	for i in 0...fail_list.size
		puts "cp -f #{fail_list[i].test_abs_path} #{fail_list[i].golden_abs_path} ..."
		call_system( "cp -f #{fail_list[i].test_abs_path} #{fail_list[i].golden_abs_path}" )
	end
end
